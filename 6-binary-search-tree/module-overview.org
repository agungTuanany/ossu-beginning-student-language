* Module Overview

** Binary Search Tree

In this module we will investigate how the structure of data affect performance,
especially when it comes to the time required to find an element in a large data
store. As a part of that we will discover a new self-referential form of data,
binary search tree or BST.

We will also learn to design data definition and function for BTSs. We will not need
any new design technique for this; we already know enough to do it. In fact, the recipe
rules we have already covered can work with a wide range of self-referential data.

Working through the videos and practice materials for this module take approximately
5-6 hours of dedicated time to complete.

The programs are bit longer again in this module. To avoid feeling overwhelming by
the new form of data it is really important to let the design recipe help you focus
your attention. Don't try to think about the whole problem at once - focus on the current
step of the recipe only.

Also be sure to trust the natural recursion! That's the key to making it easy to design
functions that operate on data that has self-reference in its definition.

* Learning Goals

- Be able to reason informally about the time required to search data.

- Be able to identify problem domain information that should be represented
  using binary search tree.

- Be able to check whether a given tree conforms to the binary search tree invariants.

- Be able to use the design recipes to design with binary search tree.
